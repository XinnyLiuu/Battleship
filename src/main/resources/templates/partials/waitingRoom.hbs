<style>
    .request-btn {
        float: right;
    }

    #waiting-chat {
        height: 500px;
        width: auto;
    }

    #message-box {
        position: absolute;
        bottom: 0;
        width: 100%;
        left: 0;
    }

    #chat {
        height: 90%;
        width: auto;
    }

    #user-list-container {
        height: 500px;
        width: auto;
    }
</style>

<div class="container-fluid">
    <div class="row p-4">
        <div id="waiting-chat" class="card col-md-9 p-4 bg-light">
            <div id="chat" class="overflow-auto"></div>

            <div id="message-box" class="input-group">
                <input id="message" type="text" class="form-control" placeholder="Enter message to send">
                <div class="input-group-append">
                    <button id="send" class="btn btn-primary" type="button"><i class="fas fa-paper-plane"></i></button>
                </div>
            </div>
        </div>

        <div id="user-list-container" class="col-md-3 p-4 bg-light overflow-auto">
            <h6>Available Users: <span id="user-count" class="badge badge-primary">0</span></h6>
            <ul id="user-list" class="list-group"></ul>
        </div>
    </div>
</div>


<script>
    const sendBtn = document.querySelector("#send");
    const messageInput = document.querySelector("#message");
    const chat = document.querySelector("#chat");
    const userList = document.querySelector("#user-list");
    const userCount = document.querySelector("#user-count");

    // Send a message, clear input
    function sendMessage(ws, message) {
        if (message) {
            ws.send(message);
            messageInput.value = "";
        }
    }

    // Updates the chat all existing messages
    function updateChat(message) {
        const data = JSON.parse(message.data);

        // Append message to chat ui
        const messageElement = document.createElement("p");
        messageElement.innerHTML = data.message;

        if (data.type === "SYSTEM_TYPE") {
            messageElement.style.color = "#343a40";
            messageElement.style.fontWeight = "bold";
        } else {
            messageElement.style.color = data.color;
        }

        chat.appendChild(messageElement);
        chat.scrollTop = chat.scrollHeight;

        // Append current users to user list ui
        if (!data.users.length) {
            userList.innerHTML = "There's no one available right now :(";
        }

        userList.innerHTML = "";
        userCount.innerHTML = data.users.length;

        for (const user of data.users) {
            const listElement = document.createElement("li");
            listElement.innerHTML = user;
            listElement.className = "list-group-item";

            const requestBtnElement = document.createElement("button");
            requestBtnElement.type = "button";
            requestBtnElement.className = "btn btn-outline-primary btn-sm request-btn";
            requestBtnElement.textContent = "Request";

            listElement.appendChild(requestBtnElement);
            userList.append(listElement);
        }
    }

    // Create websocket connection
    const websocket = new WebSocket(`ws://${location.hostname}:${location.port}/waiting-room`);
    websocket.onmessage = (msg) => updateChat(msg);
    websocket.onclose = () => {
        alert("Websocket closed!");
        window.location.replace("/");
    }
    websocket.onerror = (e) => {
        alert("Websocket error!");
        console.error(e);
    }

    // Event listeners
    sendBtn.addEventListener("click", () => {
        sendMessage(websocket, messageInput.value)
    });

    messageInput.addEventListener("keypress", (e) => {
        if (e.keyCode === 13) {
            sendMessage(websocket, messageInput.value);
        }
    });

</script>