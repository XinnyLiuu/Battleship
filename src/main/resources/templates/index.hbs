{{>partials/header.hbs}}
{{>partials/waitingRoom.hbs}}

<script src="/js/utils.js"></script>
<script src="/js/constants.js"></script>
<script>
    const sendBtn = document.querySelector("#send");
    const messageInput = document.querySelector("#message");
    const chat = document.querySelector("#chat");
    const userList = document.querySelector("#user-list");
    const userCount = document.querySelector("#user-count");

    // Create websocket connection
    const websocket = new WebSocket(WAITING_ROOM_WEBSOCKET_URL);
    websocket.onmessage = (msg) => updateChat(msg);
    websocket.onclose = (e) => {
        console.error(e);
        document.querySelector("#alert-modal-accept")
            .addEventListener("click", () => {
                window.location.replace("/");
            });
        showAlertModal("Websocket closed!");
    }
    websocket.onerror = (e) => {
        console.error(e);
        showAlertModal("Websocket error!");
    }

    // Prompt user if they wish to play with sender
    function processChallengeRequest(sender, message, hasAccepted) {
        document.querySelector("#invite-modal-body").innerHTML = message;

        document.querySelector("#invite-modal-accept")
            .addEventListener("click", () => {
                websocket.send(JSON.stringify({
                    type: MESSAGE_TYPE_ACCEPT,
                    message: sender
                }));
            });

        document.querySelector("#invite-modal-decline")
            .addEventListener("click", () => {
                websocket.send(JSON.stringify({
                    type: MESSAGE_TYPE_DECLINE,
                    message: sender
                }));
            });

        $("#invite-modal").modal({
            backdrop: "static",
            keyboard: false
        });
    }

    // Send a message, clear input
    function sendMessage(message, type) {
        let data = {};

        if (message) {
            data.type = type;
            data.message = message;

            websocket.send(JSON.stringify(data));
            messageInput.value = "";
        }
    }

    // Updates the chat all existing messages
    function updateChat(message) {
        const data = JSON.parse(message.data);
        console.log(data);

        // Check if the message received is a challenge request, prompt user to accept
        if (data.type === MESSAGE_TYPE_CHALLENGE) {
            processChallengeRequest(data.sender, data.message);
            return;
        }

        if (data.type === MESSAGE_TYPE_ACCEPT) {
            document.querySelector("#redirect-modal-body").innerHTML = data.message;
            document.querySelector("#redirect-modal-accept")
                .addEventListener("click", () => {
                    setCookie(COOKIE_GAME_ROOM_ID, data.gameRoomId, 365);
                    window.location.replace("/game");
                });

            $("#redirect-modal").modal({
                backdrop: "static",
                keyboard: false
            });

            return;
        }

        if (data.type === MESSAGE_TYPE_DECLINE) {
            showAlertModal(data.message);
            return;
        }

        // Append message to chat ui
        chat.appendChild(createMessageElement(data));
        chat.scrollTop = chat.scrollHeight;

        // Append current users to user list ui
        userList.innerHTML = "";
        data.users = data.users.filter(user => user != getCookie(COOKIE_USERNAME));
        userCount.innerHTML = data.users.length;

        for (const user of data.users) {
            const listElement = document.createElement("li");
            listElement.innerHTML = user;
            listElement.className = "list-group-item";

            const requestBtnElement = document.createElement("button");
            requestBtnElement.type = "button";
            requestBtnElement.className = "btn btn-outline-primary btn-sm request-btn";
            requestBtnElement.textContent = "Challenge";
            requestBtnElement.dataset.targetUser = user;
            requestBtnElement.addEventListener("click", (e) => {
                let targetUser = e.target.dataset.targetUser;
                sendMessage(targetUser, MESSAGE_TYPE_CHALLENGE);
            });

            listElement.appendChild(requestBtnElement);
            userList.append(listElement);
        }
    }

    // Event listeners
    sendBtn.addEventListener("click", () => {
        sendMessage(messageInput.value, MESSAGE_TYPE_CHAT)
    });

    messageInput.addEventListener("keypress", (e) => {
        if (e.keyCode === 13) {
            sendMessage(messageInput.value, MESSAGE_TYPE_CHAT);
        }
    });
</script>

{{>partials/footer.hbs}}