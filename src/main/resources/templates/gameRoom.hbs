{{>partials/header.hbs}}
{{>partials/waitingRoom.hbs}}

<script src="/js/utils.js"></script>
<script src="/js/constants.js"></script>
<script>
    const sendBtn = document.querySelector("#send");
    const messageInput = document.querySelector("#message");
    const chat = document.querySelector("#chat");
    const userList = document.querySelector("#user-list");
    const userCount = document.querySelector("#user-count");

    // Create websocket connection
    const websocket = new WebSocket(GAME_ROOM_WEBSOCKET_URL);
    websocket.onmessage = (msg) => updateChat(msg);
    websocket.onclose = (e) => {
        console.error(e);
        alert("Websocket closed!");
        window.location.replace("/");
    }
    websocket.onerror = (e) => {
        console.error(e);
        alert("Websocket error!");
    }

    // Send a message, clear input
    function sendMessage(message, type) {
        let data = {};

        if (message) {
            data.type = type;
            data.message = message;

            websocket.send(JSON.stringify(data));
            messageInput.value = "";
        }
    }

    // Updates the chat all existing messages
    function updateChat(message) {
        const data = JSON.parse(message.data);

        // Append message to chat ui
        const messageElement = document.createElement("p");
        messageElement.innerHTML = data.message;

        if (data.type === MESSAGE_TYPE_SYSTEM) {
            messageElement.style.color = "#343a40";
            messageElement.style.fontWeight = "bold";
        } else {
            messageElement.style.color = data.color;
        }

        chat.appendChild(messageElement);
        chat.scrollTop = chat.scrollHeight;

        // Append current users to user list ui
        userList.innerHTML = "";
        data.users = data.users.filter(user => user != getCookie("username"));
        userCount.innerHTML = data.users.length;

        for (const user of data.users) {
            const listElement = document.createElement("li");
            listElement.innerHTML = user;
            listElement.className = "list-group-item";

            userList.append(listElement);
        }
    }

    // Event listeners
    sendBtn.addEventListener("click", () => {
        sendMessage(messageInput.value, MESSAGE_TYPE_CHAT);
    });

    messageInput.addEventListener("keypress", (e) => {
        if (e.keyCode === 13) {
            sendMessage(messageInput.value, MESSAGE_TYPE_CHAT);
        }
    });
</script>

{{>partials/footer.hbs}}