{{>partials/header.hbs}}
{{>partials/room.hbs}}

<script src="/js/utils.js"></script>
<script src="/js/constants.js"></script>
<script>
    const sendBtn = document.querySelector("#send");
    const messageInput = document.querySelector("#message");
    const chat = document.querySelector("#chat");
    const userList = document.querySelector("#user-list");
    const userCount = document.querySelector("#user-count");
    const leaveBtn = document.querySelector("#leave-btn");

    // Create websocket connection
    const websocket = new WebSocket(GAME_ROOM_WEBSOCKET_URL);
    websocket.onmessage = (msg) => updateChat(msg);
    websocket.onclose = (e) => {
        console.error(e);
        document.querySelector("#alert-modal-accept")
            .addEventListener("click", () => {
                window.location.replace("/");
            });
        showAlertModal("Websocket closed!");
    }
    websocket.onerror = (e) => {
        console.error(e);
        showAlertModal("Websocket error!");
    }

    // Send a message, clear input
    function sendMessage(message, type) {
        let data = {};

        if (message) {
            data.type = type;
            data.message = message;

            websocket.send(JSON.stringify(data));
            messageInput.value = "";
        }
    }

    // Updates the chat all existing messages
    function updateChat(message) {
        const data = JSON.parse(message.data);
        console.log(data);

        if (data.type === MESSAGE_TYPE_END) {
            document.querySelector("#redirect-modal-body").innerHTML = data.message;
            document.querySelector("#redirect-modal-accept")
                .addEventListener("click", () => {
                    deleteCookie(COOKIE_GAME_ROOM_ID);
                    window.location.replace("/");
                });

            $("#redirect-modal").modal({
                backdrop: "static",
                keyboard: false
            });

            return;
        }

        // Append message to chat ui
        chat.appendChild(createMessageElement(data));
        chat.scrollTop = chat.scrollHeight;

        // Append current users to user list ui
        userList.innerHTML = "";
        data.users = data.users.filter(user => user != getCookie(COOKIE_USERNAME));
        userCount.innerHTML = data.users.length;

        for (const user of data.users) {
            const listElement = document.createElement("li");
            listElement.innerHTML = user;
            listElement.className = "list-group-item";

            userList.append(listElement);
        }
    }

    // Prepares the game board board
    function drawBoard() {
        let board = "",
            x,
            y,
            cx,
            cy;

        // Draw the cells
        for (let i = 0; i < 10; i++) {
            for (let j = 0; j < 10; j++) {
                x = 75 * i + 50;
                y = 75 * j + 20;

                board += `<rect x="${x}" 
                            y="${y}" 
                            width="75" 
                            height="75" 
                            stroke-width="5" 
                            stroke="#d2eeff" 
                            id="cell_${i}${j}" 
                            fill="#0077be" />`;
            }
        }

        /*
         * Ships:
         *   Carrier     (5)
         *   Battleship  (4)
         *   Destroyer   (3)
         *   Submarine   (3)
         *   Patrol Boat (2)
         */


        document.querySelector("#board").innerHTML = board;
    }

    // Event listeners
    sendBtn.addEventListener("click", () => {
        sendMessage(messageInput.value, MESSAGE_TYPE_CHAT);
    });

    messageInput.addEventListener("keypress", (e) => {
        if (e.keyCode === 13) {
            sendMessage(messageInput.value, MESSAGE_TYPE_CHAT);
        }
    });

    leaveBtn.addEventListener("click", () => {
        window.location.replace("/");
    });

    window.addEventListener("beforeunload", (e) => {
        deleteCookie(COOKIE_GAME_ROOM_ID);
    });

    window.addEventListener("load", (e) => {
        drawBoard();
    });
</script>

{{>partials/footer.hbs}}